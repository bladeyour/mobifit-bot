from flask import Flask, request
import os
import requests

app = Flask(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN")
API_URL = f"https://api.telegram.org/bot{TOKEN}"

user_data = {}

def send_message(chat_id, text, reply_markup=None):
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    requests.post(f"{API_URL}/sendMessage", json=payload)

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    if "message" not in data:
        return "", 200

    chat_id = data["message"]["chat"]["id"]
    text = data["message"].get("text", "").strip()

    if chat_id not in user_data:
        user_data[chat_id] = {}

    state = user_data[chat_id]

    if text == "/start":
        user_data[chat_id] = {}
        reply_markup = {
            "keyboard": [[{"text": "üë® –ß–æ–ª–æ–≤—ñ—á–∞"}], [{"text": "üë© –ñ—ñ–Ω–æ—á–∞"}]],
            "one_time_keyboard": True,
            "resize_keyboard": True
        }
        send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –Ø Mobifit ‚Äî —Ç–≤—ñ–π –®–Ü-—Ñ—ñ—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä üí™\n\n–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å:", reply_markup)
        return "", 200

    if "gender" not in state:
        if "—á–æ–ª–æ–≤—ñ—á–∞" in text.lower():
            state["gender"] = "male"
        elif "–∂—ñ–Ω–æ—á–∞" in text.lower():
            state["gender"] = "female"
        else:
            send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å: üë® –∞–±–æ üë©")
            return "", 200
        send_message(chat_id, "–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?")
        return "", 200

    if "age" not in state:
        if text.isdigit():
            state["age"] = int(text)
            send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑—Ä—ñ—Å—Ç —É —Å–º:")
        else:
            send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (—á–∏—Å–ª–æ):")
        return "", 200

    if "height" not in state:
        if text.isdigit():
            state["height"] = int(text)
            send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É –≤ –∫–≥:")
        else:
            send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –∑—Ä—ñ—Å—Ç —á–∏—Å–ª–æ–º —É —Å–º:")
        return "", 200

    if "weight" not in state:
        if text.isdigit():
            state["weight"] = int(text)
            reply_markup = {
                "keyboard": [[{"text": "‚öñÔ∏è –°—Ö—É–¥–Ω—É—Ç–∏"}], [{"text": "üí™ –ù–∞–±—Ä–∞—Ç–∏"}], [{"text": "üßò –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏"}]],
                "one_time_keyboard": True,
                "resize_keyboard": True
            }
            send_message(chat_id, "–Ø–∫–∞ –≤–∞—à–∞ –º–µ—Ç–∞?", reply_markup)
        else:
            send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É —á–∏—Å–ª–æ–º —É –∫–≥:")
        return "", 200

    if "goal" not in state:
        goals = {"—Å—Ö—É–¥–Ω—É—Ç–∏": "cut", "–Ω–∞–±—Ä–∞—Ç–∏": "bulk", "–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏": "maintain"}
        for key in goals:
            if key in text.lower():
                state["goal"] = goals[key]
                return generate_plan(chat_id, state)
        send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç—É: ‚öñÔ∏è / üí™ / üßò")
        return "", 200

    return "", 200

def generate_plan(chat_id, state):
    age = state["age"]
    height = state["height"]
    weight = state["weight"]
    gender = state["gender"]
    goal = state["goal"]

    # BMR (Mifflin‚ÄìSt Jeor)
    if gender == "male":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161

    # Activity multiplier (–ª–µ–≥–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å)
    calories = int(bmr * 1.4)

    if goal == "cut":
        calories -= 300
    elif goal == "bulk":
        calories += 300

    protein = int(weight * 1.8)
    water = round(weight * 0.035, 2)

    goal_text = {
        "cut": "‚öñÔ∏è –°—Ö—É–¥–Ω–µ–Ω–Ω—è",
        "bulk": "üí™ –ù–∞–±—ñ—Ä –º–∞—Å–∏",
        "maintain": "üßò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ñ–æ—Ä–º–∏"
    }

    plan = f"""
*üìä –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ—Ç–Ω–µ—Å-–ø–ª–∞–Ω:*

*–°—Ç–∞—Ç—å:* {'–ß–æ–ª–æ–≤—ñ—á–∞' if gender == 'male' else '–ñ—ñ–Ω–æ—á–∞'}
*–í—ñ–∫:* {age}
*–ó—Ä—ñ—Å—Ç:* {height} —Å–º
*–í–∞–≥–∞:* {weight} –∫–≥
*–ú–µ—Ç–∞:* {goal_text[goal]}

*üî• –ö–∞–ª–æ—Ä—ñ–π –Ω–∞ –¥–µ–Ω—å:* {calories} –∫–∫–∞–ª
*ü•© –ë—ñ–ª–∫—ñ–≤:* {protein} –≥/–¥–µ–Ω—å
*üíß –í–æ–¥–∏:* {water} –ª/–¥–µ–Ω—å

*üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è):*
- –ü–Ω: –°–∏–ª–æ–≤—ñ (–Ω–æ–≥–∏ + –ø—Ä–µ—Å)
- –í—Ç: –ö–∞—Ä–¥—ñ–æ 30‚Äì40 —Ö–≤
- –°—Ä: –í–µ—Ä—Ö —Ç—ñ–ª–∞ + —Å–ø–∏–Ω–∞
- –ß—Ç: –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫
- –ü—Ç: –°–∏–ª–æ–≤—ñ (–≥—Ä—É–¥–∏ + –ø–ª–µ—á—ñ)
- –°–±: –ô–æ–≥–∞ –∞–±–æ –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞
- –ù–¥: –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –∞–±–æ –ª–µ–≥–∫–µ –∫–∞—Ä–¥—ñ–æ

–ü–æ—á–Ω–µ–º–æ? üí™
"""

    send_message(chat_id, plan)
    return "", 200
